#!/bin/bash
#
# tm: a simple tool to manage tasks, a journal, todo list and meeting notes


# Define global variables
DOCUMENTS_DIR=$(xdg-user-dir DOCUMENTS)
if [[ $DOCUMENTS_DIR == "" ]]; then
    DOCUMENTS_DIR=$HOME
fi

MAIN_DIR="$DOCUMENTS_DIR/tm"
TASKS_DIR="$MAIN_DIR/tasks"
JOURNAL_DIR="$MAIN_DIR/journal"
TODO_FILE="$MAIN_DIR/todo.md"

# Add some extra arguments if editor is vim or neovim
EDITOR_ARGS=()  # no extra arguments for the EDITOR by default
editor_name=$(echo "$EDITOR" | rev | cut -d "/" -f 1 | rev)
if [[ $editor_name == "vim" || $editor_name == "nvim" ]]; then
    EDITOR_ARGS=(-c "norm G" -O)  # extra arguments for the EDITOR
fi


function get_month_file () {
    # Prints path to month file for current date
    #
    # A month file is a Markdown file whose name is formed its corresponding
    # year and month, e.g. YYYY-MM.md. The first heading of the file is
    # composed by the corresponding year and month. For every day a new
    # subheading is created with its corresponding date. This function creates
    # the month file if it doesn't exists.
    #
    # Parameters
    # ----------
    # section_dir :
    #     path to the section directory, the parent dir of the month file
    # pretitle :
    #     string with the text that should be included before the title
    #     For example, passing "Notes for" would generate the following title:
    #     "Notes for June, 2022".

    # Get parameters
    local section_dir=$1
    local pretitle=$2

    # Define path to file
    local file
    file="$section_dir"/$(date '+%Y-%m-%d').md

    # Check if month file exists
    local last_date=""
    if [[ -f "$file" ]]; then
        last_date=$(get_last_date "$file")
    else
        # Create month file if missing
        touch "$file"
        # And append first heading
        local title
        title=$(date '+%Y-%m')
        if [[ $pretitle != "" ]]; then
            title="$pretitle $title"
        fi
        echo "$title" >> "$file"
        # Add a line full of equal signs
        local i; i=0
        for (( i == 0; i < $(echo "$title" | wc -L); ++i));
            do echo -n "=" >> "$file";
        done
        echo "" >> "$file"  # Add a line break after the line full of equals
    fi

    # Add subheading for today if needed
    local today_weekday
    today_weekday=$(date '+%Y-%m-%d %A')
    if [[ $last_date != "$today_weekday" ]]; then
        echo "" >> "$file"
        echo "$today_weekday" >> "$file"
        # Add a line full of minus signs
        local i; i=0
        for (( i == 0; i < $(echo "$today_weekday" | wc -L); ++i));
            do echo -n "-" >> "$file";
        done
        echo "" >> "$file"  # Add a line break after the line full of minuses
    fi

    echo "$file"
}


function get_last_date() {
    # Prints the last date present in a month file
    local file=$1
    # Get last date in the file
    #   regex finds every line that matches a today_weekday
    #   tail gets the last one of those lines
    grep -E "^[0-9]{4}-[0-9]{2}-[0-9]{2} \w+$" "$file" | sort -g | tail -n 1
}


function get_year_dir () {
    # Prints the dir corresponding to the current year for a given section
    #
    # Creates the directory if it doesn't exists
    #
    # Parameters
    # ----------
    # section_dir : path to the directory of the section
    #
    # Example
    # -------
    # $ get_year_dir /path/to/notes/tasks
    # /path/to/notes/tasks/2022

    # Get path to section directory
    local section_dir=$1
    # Define year directory
    local year_dir
    year_dir="$section_dir"/$(date "+%Y")
    # Create year directory if missing
    mkdir -p "$year_dir"
    # Echo the path to it
    echo "$year_dir"
}

# ===========================================================================

# Change directory to MAIN_DIR
if [[ ! -d $MAIN_DIR ]]; then
    mkdir -p "$MAIN_DIR"
fi
cd "$MAIN_DIR" || exit

case "$1" in
"")
    parent_dir=$(get_year_dir "$TASKS_DIR")
    file=$(get_month_file "$parent_dir" "Tasks for")
    $EDITOR "${EDITOR_ARGS[@]}" "$file" "$TODO_FILE"
    ;;
"journal")
    parent_dir=$(get_year_dir "$JOURNAL_DIR")
    file=$(get_month_file "$parent_dir" "Journal for")
    $EDITOR "${EDITOR_ARGS[@]}" "$file"
    ;;
*)
    echo "'$1' is not a valid command. See 'notes --help'";;
esac
